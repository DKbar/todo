{"version":3,"sources":["Components/Login/Login.module.css","Components/Login/LoginForm.jsx","Components/Login/Login.jsx","Components/Login/LoginContainer.jsx","Components/utils/validators/validators.js"],"names":["module","exports","LoginForm","props","initialValues","email","password","rememberMe","captcha","validate","requiredCreator","onSubmit","values","setSubmitting","setStatus","setTimeout","login","isSubmitting","status","placeholder","type","name","component","captchaUrl","src","disabled","isAuths","Login","isAuth","to","className","styles","LoginContainer","connect","state","auth","fields","maxLength","errors","field"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,mFC8DXC,EA5DC,SAACC,GAEb,OACI,cAAC,IAAD,CACIC,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIC,YAAY,EAAOC,QAAS,IACtEC,SAAUC,YAAgB,CAAC,QAAS,YAAa,GAejDC,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAChCC,YAAW,WACPZ,EAAMa,MAAMJ,EAAQE,GACpBD,GAAc,KACf,MArBX,SAwBK,gBAAGI,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,IAAD,WAAM,gCACF,gCACI,cAAC,IAAD,CAAOC,YAAY,QAAQC,KAAK,QAAQC,KAAK,UAC7C,cAAC,IAAD,CAAcA,KAAK,QAAQC,UAAU,WAEzC,gCACI,cAAC,IAAD,CAAOH,YAAY,WAAWC,KAAK,WAAWC,KAAK,aACnD,cAAC,IAAD,CAAcA,KAAK,WAAWC,UAAU,WAE5C,gCACI,cAAC,IAAD,CAAOF,KAAK,WAAWC,KAAK,eADhC,kBAGCH,EAAS,8BAAMA,IAAgB,QAE/Bf,EAAMoB,WAAa,gCAChB,qBAAKC,IAAKrB,EAAMoB,aAChB,gCACI,cAAC,IAAD,CAAmDF,KAAK,YACxD,cAAC,IAAD,CAAcA,KAAK,WAAWC,UAAU,cAI1C,KAEN,wBAAQF,KAAK,SAASK,SAAUR,EAAhC,SACKd,EAAMuB,QAAU,SAAW,iB,yBCjC7BC,EAnBX,SAACxB,GACL,OAAIA,EAAMyB,OACH,cAAC,IAAD,CAAUC,GAAI,eAEjB,mCACJ,sBAAKC,UAAWC,IAAOf,MAAvB,UACA,uCACA,cAAC,EAAD,CAAWA,MAAOb,EAAMa,MAAOY,OAAUzB,EAAMyB,OAAQL,WAAYpB,EAAMoB,aACzE,gCACA,yGACA,2DACA,yDCJJS,EAAiBC,aAPG,SAACC,GACrB,MAAO,CACHN,OAAQM,EAAMC,KAAKP,OACnBL,WAAYW,EAAMC,KAAKZ,cAIe,CAAEP,WAA3BiB,CAAoCN,GAC1CK,a,8ECZFtB,EAAkB,SAAC0B,EAAQC,GAAT,OAAuB,SAAAzB,GACpD,IAD8D,EACxD0B,EAAS,GAD+C,cAE5CF,GAF4C,IAE9D,2BAA0B,CAAC,IAAlBG,EAAiB,QACnB3B,EAAO2B,KACVD,EAAOC,GAAS,aAJ0C,8BAW9D,OAAOD","file":"static/js/8.a23b9f5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__UmS23\"};","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport { requiredCreator } from \"../utils/validators/validators\";\r\n\r\nlet LoginForm = (props) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', rememberMe: false, captcha: '' }}\r\n            validate={requiredCreator(['email', 'password'], 6)}\r\n            /* {values => {\r\n              const errors = {};\r\n              if (!values.email) {\r\n                errors.email = 'Required';\r\n              } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n              ) {\r\n                errors.email = 'Invalid email address';\r\n              }\r\n              if (!values.password) {\r\n                 errors.password = 'Required';\r\n              }\r\n              return errors;\r\n            }} */\r\n            onSubmit={(values, { setSubmitting, setStatus }) => {\r\n                setTimeout(() => {\r\n                    props.login(values, setStatus)\r\n                    setSubmitting(false);\r\n                }, 400);\r\n            }}\r\n        >\r\n            {({ isSubmitting, status }) => (\r\n                <Form><div>\r\n                    <div>\r\n                        <Field placeholder='Login' type=\"email\" name=\"email\" />\r\n                        <ErrorMessage name=\"email\" component=\"div\" />\r\n                    </div>\r\n                    <div>\r\n                        <Field placeholder='Password' type=\"password\" name=\"password\" />\r\n                        <ErrorMessage name=\"password\" component=\"div\" />\r\n                    </div>\r\n                    <div>\r\n                        <Field type=\"checkbox\" name=\"rememberMe\" /> Remember Me\r\n                    </div>\r\n                    {status ? <div>{status}</div> : null}\r\n                </div>\r\n                    {props.captchaUrl ? <div>\r\n                        <img src={props.captchaUrl} /* alt='captcha' */></img>\r\n                        <div>\r\n                            <Field /* placeholder='captcha' type=\"password\" */ name=\"captcha\" />\r\n                            <ErrorMessage name=\"password\" component=\"div\" />\r\n                        </div>\r\n\r\n                    </div>\r\n                        : null}\r\n\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        {props.isAuths ? \"Logout\" : \"Login\"}\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\nexport default LoginForm;","import LoginForm from \"./LoginForm\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from './Login.module.css'\r\n\r\nlet Login = (props) => {\r\n        if (props.isAuth) {\r\n        return <Redirect to={\"/TodoLists\"}/>\r\n    }\r\n    return (<>\r\n        <div className={styles.login}>\r\n        <h2>Login</h2>    \r\n        <LoginForm login={props.login} isAuth = {props.isAuth} captchaUrl={props.captchaUrl}/>\r\n        <div>\r\n        <h2>Тестовые Email и Password </h2>\r\n        <h3>Email: free@samuraijs.com</h3>\r\n        <h3>Password: free</h3>\r\n        </div>\r\n        </div>\r\n        </>\r\n        )\r\n\r\n}\r\n\r\n        export default Login","import { connect } from \"react-redux\";\r\nimport { login } from \"../../Redux/auth-reducer\";\r\nimport Login from \"./Login\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n\r\n}\r\nlet LoginContainer = connect(mapStateToProps, { login })(Login)\r\nexport default LoginContainer;\r\n\r\n\r\n\r\n","export const requiredCreator = (fields, maxLength) => values => {\r\n  const errors = {};\r\n  for (let field of fields) {\r\n    if (!values[field]) {\r\n      errors[field] = 'Required';\r\n    } /* else if (values[field].length > maxLength) {\r\n      errors.[field] = `length > ${maxLength}`;\r\n    } */\r\n  }\r\n\r\n\r\n  return errors;\r\n}\r\n\r\n\r\n/* export const required = values => {\r\n\r\n    const errors = {};\r\n    if (!values.email) {\r\n      errors.email = 'Required';\r\n    } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n       errors.password = 'Required';\r\n    }\r\n    return errors;\r\n  } */"],"sourceRoot":""}